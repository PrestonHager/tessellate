---
name: Release

on:
  pull_request:
    types: [closed]
    branches: ["main"]
  workflow_dispatch:

jobs:
  check_version:
    name: Check Version Bump
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.merged == true ||
      github.event_name == 'workflow_dispatch'
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
      current_version: ${{ steps.version_check.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version was bumped
        id: version_check
        run: |
          # Get current version from gemspec
          CURRENT_VERSION=$(grep -oP "spec.version\s*=\s*\"\K[^\"]*" \
            tessellate.gemspec)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # For workflow_dispatch, always proceed
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Manual dispatch - proceeding with release"
            exit 0
          fi

          # Get previous version from the target branch
          git checkout ${{ github.event.pull_request.base.sha }}
          PREVIOUS_VERSION=$(grep -oP "spec.version\s*=\s*\"\K[^\"]*" \
            tessellate.gemspec)
          git checkout ${{ github.event.pull_request.head.sha }}

          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"

          # Compare versions using sort -V (version sort)
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            NEWER=$(printf '%s\n%s\n' "$PREVIOUS_VERSION" \
              "$CURRENT_VERSION" | sort -V | tail -n 1)
            if [ "$NEWER" = "$CURRENT_VERSION" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "Version increased from $PREVIOUS_VERSION to" \
              "$CURRENT_VERSION"
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "Version decreased from $PREVIOUS_VERSION to" \
              "$CURRENT_VERSION - not releasing"
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $CURRENT_VERSION"
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: check_version
    if: needs.check_version.outputs.version_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.4
          bundler-cache: true

      # Check if tests exist (from PR #8/#9)
      - name: Check for test files
        id: test_check
        run: |
          if [ -f "Rakefile" ] || [ -d "spec" ] || [ -d "test" ] || \
             [ -f "test_suite.rb" ]; then
            echo "tests_exist=true" >> $GITHUB_OUTPUT
          else
            echo "tests_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests if they exist
        if: steps.test_check.outputs.tests_exist == 'true'
        run: |
          if [ -f "test_suite.rb" ]; then
            echo "Running standalone test suite..."
            ruby test_suite.rb
          elif [ -f "Rakefile" ]; then
            echo "Running rake tests..."
            bundle exec rake test || bundle exec rake spec || \
              echo "No test task found in Rakefile"
          else
            echo "No tests found - proceeding without testing"
          fi

  build:
    name: Build + Publish
    runs-on: ubuntu-latest
    needs: [check_version, test]
    if: needs.check_version.outputs.version_changed == 'true'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.4

      - name: Publish to GPR
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          printf -- "---\n:github: ${GEM_HOST_API_KEY}\n" > \
            $HOME/.gem/credentials
          gem build *.gemspec
          gem push --KEY github \
            --host https://rubygems.pkg.github.com/${OWNER} *.gem
        env:
          GEM_HOST_API_KEY: "Bearer ${{secrets.GITHUB_TOKEN}}"
          OWNER: ${{ github.repository_owner }}

      - name: Publish to RubyGems
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          printf -- "---\n:rubygems_api_key: ${GEM_HOST_API_KEY}\n" > \
            $HOME/.gem/credentials
          gem build *.gemspec
          gem push *.gem
        env:
          GEM_HOST_API_KEY: "${{secrets.RUBYGEMS_AUTH_TOKEN}}"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check_version.outputs.current_version }}
          release_name: >
            Release v${{ needs.check_version.outputs.current_version }}
          body: |
            Automated release for version
            ${{ needs.check_version.outputs.current_version }}
          draft: false
          prerelease: false
